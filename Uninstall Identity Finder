#!/bin/bash
# On “uninstall” ask if user prefs should be preserved or not. If not, then blow away
# license/activation info/all plists/etc – if preserve, then just unload launch agent 
# and blow away everything except any identityfinder.lic, activation dat file, and user 
# prefs/plist.

# UninstallIDF.sh Version 20141015

shopt -s checkhash cmdhist nullglob;

runSilently=0;
answerYes=0;
answerNo=0;
askForPassword=0;
IDFAppName="Identity Finder.app";
IDFReverseDomainRoot="com.identityfinder";
IDFPrefsName="$IDFReverseDomainRoot.macedition.plist";
IDFXMLName="$IDFReverseDomainRoot.macedition.xml";
UsersSharedPathBase="/Users/Shared/.identityfinder";
UsersSharedPath="$UsersSharedPathBase/Application/{04964656e-7469-7479-2046-696e6465720}";
UsersPrefsPath="$HOME/Library/Preferences";
SystemAppSupportPath="/Library/Application Support/Identity Finder";
SystemLibraryPath="/Library/Identity Finder";
SystemPrefsPath="/Library/Preferences";
ReceiptsPath="/Library/Receipts";
UsersAppSupportBase="$HOME/Library/Application Support/Identity Finder";
UsersAppSupportFullPath="$UsersAppSupportBase/Identity Finder Mac Edition";
LaunchAgent="$IDFReverseDomainRoot.launchagent.plist";
LaunchDaemon="$IDFReverseDomainRoot.launchdaemon.plist";

function printResult { echo $*; }

# Replace this name with the actual name of your installer package.
# See http://support.identityfinder.com/entries/114922 for full instructions.
# Run man pkgutil for additional information.
IDFPackageName="com.identityfinder.pkg";
IDFReceiptName="Identityfinder.pkg";

RemoveFileOrDirectory () {
	sudoStr="";
	if (($askForPassword==1)); then
		sudoStr="sudo";
	fi
  $sudoStr rm -Rf "$1";
  rmresult=$?;
  if (($runSilently==0)); then
    if [ $rmresult -eq 0 ]; then
      if [ -e "$1" ]; then
        echo "$1 delete FAILED, try with the password option, -p and enter the admin password.";
      else
        echo "$1 REMOVED.";
      fi
    else
      echo "mv $1 FAILED with error $?, try with the password option, -p and enter the admin password.";
    fi
  fi
}

PrintHelp () {
    echo "NAME";
    echo "    UninstallIDF -- uninstall Identity Finder.";
    echo "SYNOPSIS";
    echo "    UninstallIDF [options]"; 
    echo "COPYRIGHT"
    echo "    UninstallIDF Copyright (C) 2013 Identity Finder, LLC.";
    echo "DESCRIPTION"
    echo "    Run this script to uninstall the Identity Finder application, its";
    echo "    launch agent and daemon, data files, preferences files, license,";
    echo "    and activation file, optionally running silently and auto-answering";
    echo "    Yes or No to uninstall level.";
    echo "";
    echo "    Answer Yes to the \"Preserve user prefs? (Yes/No)\" prompt to unload";
    echo "    and delete the launch agent, launch daemon, and Identity Finder.app.";
    echo "";
    echo "    Answer No to the \"Preserve user prefs? (Yes/No)\" prompt to unload and";
    echo "    delete the launch agent, launch daemon, Identity Finder.app, and";
    echo "    all licenses, activation files, and preferences files.";
    echo "OPTIONS";
    echo "    -s Run silently.";
    echo "    -y Answer Yes to \"Preserve user prefs? (Yes/No)\" prompt.";
    echo "    -n Answer No to \"Preserve user prefs? (Yes/No)\" prompt.";
    echo "    -p Ask for administrator password to remove system resources.";
    echo "    -h Prints this help message.";
}

UnloadAndDeleteLaunchDaemon () {
	if (($runSilently==0)); then
		echo "Unload and delete launch daemon...";
	fi
	if ! [ -e "/Library/LaunchDaemons/$LaunchDaemon" ]; then
		if (($runSilently==0)); then
			echo "$LaunchDaemon not installed.";
		fi
	else
		if [ -n "$(sudo launchctl list|grep com.identityfinder.launchdaemon)" ]; then
			echo "$LaunchDaemon is running, unloading...";
			sudo /bin/launchctl unload "/Library/LaunchDaemons/$LaunchDaemon";
		else
			echo "$LaunchDaemon is NOT running.";
		fi
		RemoveFileOrDirectory "/Library/LaunchDaemons/$LaunchDaemon";
		if ! [ -e "/Library/LaunchDaemons/$LaunchDaemon" ]; then
			if (($runSilently==0)); then
				echo "SUCCEEDED removing $LaunchDaemon.";
			fi
		fi
    # Remove any other Identity Finder files in this directory.
    RemoveFileOrDirectory "/Library/LaunchDaemons/$IDFReverseDomainRoot.*";
	fi
}

UnloadAndDeleteLaunchAgents () {
  # Look for the old launch agent.
	if (($runSilently==0)); then
		echo "Unload and delete $HOME/Library/LaunchAgents/$LaunchAgent...";
	fi
	if ! [ -e "$HOME/Library/LaunchAgents/$LaunchAgent" ]; then
		if (($runSilently==0)); then
			echo "$HOME/Library/LaunchAgents/$LaunchAgent not installed.";
		fi
	else
		/bin/launchctl unload "$HOME/Library/LaunchAgents/$LaunchAgent";
		RemoveFileOrDirectory "$HOME/Library/LaunchAgents/$LaunchAgent";
		if ! [ -e "$HOME/Library/LaunchAgents/$LaunchAgent" ]; then
			if (($runSilently==0)); then
				echo "SUCCEEDED removing $HOME/Library/LaunchAgents/$LaunchAgent.";
			fi
		fi
	fi
  # And the newer one...
  if (($runSilently==0)); then
		echo "Unload and delete /Library/LaunchAgents/$LaunchAgent...";
	fi
	if ! [ -e "/Library/LaunchAgents/$LaunchAgent" ]; then
		if (($runSilently==0)); then
			echo "/Library/LaunchAgents/$LaunchAgent not installed.";
		fi
	else
		sudo -u $USER /bin/launchctl unload -S Aqua "/Library/LaunchAgents/$LaunchAgent";
		RemoveFileOrDirectory "/Library/LaunchAgents/$LaunchAgent";
		if ! [ -e "/Library/LaunchAgents/$LaunchAgent" ]; then
			if (($runSilently==0)); then
				echo "SUCCEEDED removing /Library/LaunchAgents/$LaunchAgent.";
			fi
		fi
    # Remove any other Identity Finder files in this directory.
    RemoveFileOrDirectory "$HOME/Library/LaunchAgents/$IDFReverseDomainRoot.*";
	fi

	if (($askForPassword==1)); then
		UnloadAndDeleteLaunchDaemon;
	fi
}

DeleteIDFApps () {
#	This find command takes a very long time, but might be useful.
#	echo "Finding and removing all ${IDFAppName}s in $HOME...";
#	find / -type d -name "$IDFAppName" -print -exec rm -Rf {} \; ;
	if (($runSilently==0)); then
		echo "Finding and removing /Applications/$IDFAppName...";
	fi
	if ! [ -e "/Applications/$IDFAppName" ]; then
		if (($runSilently==0)); then
			echo "/Applications/$IDFAppName not found.";
		fi
	else
		RemoveFileOrDirectory "/Applications/$IDFAppName";
	fi
}

DeleteEverythingExceptLicensesActivationAndPrefs () {
	RemoveFileOrDirectory "$UsersSharedPath/Actions";
	RemoveFileOrDirectory "$UsersSharedPath/Application";
	RemoveFileOrDirectory "$UsersSharedPath/crashstatus.db";
	RemoveFileOrDirectory "$UsersSharedPath/AdminData";
	RemoveFileOrDirectory "$UsersSharedPath/endpointid.dat";
	RemoveFileOrDirectory "$UsersSharedPath/EndpointService";
	RemoveFileOrDirectory "$UsersSharedPath/LocationsActions";
	RemoveFileOrDirectory "$UsersSharedPath/epssettings.xml";
	RemoveFileOrDirectory "$UsersSharedPath/Logs";
	RemoveFileOrDirectory "$UsersSharedPath/Settings";
	RemoveFileOrDirectory "$UsersSharedPath/Tasks";
	RemoveFileOrDirectory "$UsersSharedPath/TasksCleanup";
	RemoveFileOrDirectory "$UsersSharedPath/TasksMonitor";
	RemoveFileOrDirectory "$UsersSharedPath/Temp";
	RemoveFileOrDirectory "$UsersSharedPath/Installer";
	RemoveFileOrDirectory "$UsersSharedPath/hostnames.db";
	RemoveFileOrDirectory "$UsersSharedPath/completedtasks.txt";
	RemoveFileOrDirectory "$SystemAppSupportPath/EndpointService";
	RemoveFileOrDirectory "$SystemAppSupportPath/UserAgent";
	RemoveFileOrDirectory "$UsersAppSupportFullPath/databases";
	RemoveFileOrDirectory "$UsersAppSupportFullPath/endpointservice.log";
	RemoveFileOrDirectory "$SystemLibraryPath";
	RemoveFileOrDirectory "/var/log/endpointservice.log";
	RemoveFileOrDirectory "/var/root/Library/Application Support/Identity Finder";
	RemoveFileOrDirectory "$UsersAppSupportFullPath/identitydb.dat";
	RemoveFileOrDirectory "$UsersAppSupportFullPath/identityinfo.dat";
	RemoveFileOrDirectory "$UsersAppSupportFullPath/identityinfo.sqlite";
	RemoveFileOrDirectory "$UsersAppSupportFullPath/idflogs.dat";
	RemoveFileOrDirectory "$UsersAppSupportFullPath/logs";
	RemoveFileOrDirectory "$UsersAppSupportFullPath/logtime.dat";
	RemoveFileOrDirectory "$UsersAppSupportFullPath/LiveMode";
	RemoveFileOrDirectory "$UsersAppSupportFullPath/MCData";
	RemoveFileOrDirectory "$UsersSharedPath/MCData";
	RemoveFileOrDirectory "$UsersAppSupportFullPath/mclog";
	RemoveFileOrDirectory "$UsersSharedPath/mclog";
  # Remove empty directories
  lsOutput=$(ls "$UsersAppSupportFullPath");
  if [ -n "$lsOutput" ]; then
    echo "$UsersAppSupportFullPath is not empty."
  else
    RemoveFileOrDirectory "$UsersAppSupportFullPath";
    RemoveFileOrDirectory "$UsersAppSupportBase";
  fi
  lsOutput=$(ls "$UsersSharedPath");
  if [ -n "$lsOutput" ]; then
    echo "$UsersSharedPath is not empty."
  else
    RemoveFileOrDirectory "$UsersSharedPath";
  fi
}

DeleteLicensesActivationAndPrefs () {
	# Remove activation file.
	RemoveFileOrDirectory "$UsersSharedPath/app.dat";
	# Remove license file in ~/Library/Application Support/Identity Finder
	RemoveFileOrDirectory "$UsersAppSupportFullPath/identityfinder.lic";
	# Remove license file in the /Library/Application Support/Identity Finder.
	RemoveFileOrDirectory "$SystemAppSupportPath/identityfinder.lic";
	# Remove user prefs.
  RemoveFileOrDirectory "$UsersPrefsPath/$IDFPrefsName";
  RemoveFileOrDirectory "$UsersPrefsPath/Identity Finder";
	# Remove system prefs.
  RemoveFileOrDirectory "$SystemPrefsPath/$IDFPrefsName";
  RemoveFileOrDirectory "$SystemPrefsPath/$IDFXMLName";
  # Remove the remaining directories.
  RemoveFileOrDirectory "$UsersSharedPathBase";
  RemoveFileOrDirectory "$UsersAppSupportBase";
	RemoveFileOrDirectory "$SystemAppSupportPath";
}

CleanPackageMakerDB () {
	sudoStr="";
	if (($askForPassword==1)); then
		sudoStr="sudo";
	fi
	if [ -n "$IDFPackageName" ]; then
		if (($runSilently==0)); then
			echo "Calling pkgutil unlink...";
		fi
		$sudoStr pkgutil --force --unlink "$IDFPackageName" > /dev/null 2> /dev/null;
		if (($runSilently==0)); then
			echo "Calling pkgutil forget...";
		fi
		$sudoStr pkgutil --force --forget "$IDFPackageName" > /dev/null 2> /dev/null;
    if [ -d "$ReceiptsPath/$IDFReceiptName" ]; then
      RemoveFileOrDirectory "$ReceiptsPath/$IDFReceiptName";
    else
      if (($runSilently==0)); then
        echo "$ReceiptsPath/$IDFReceiptName not found.";
      fi
		fi
	else
		if (($runSilently==0)); then
			echo "Shell variable IDFPackageName is empty, no pkgutil operations performed.";
		fi
	fi
}

OPTERR=0;
while getopts synph opts
do
    case $opts in
		s) runSilently=1;;
		y) answerYes=1; answerNo=0;;
		n) answerYes=0; answerNo=1;;
		p) askForPassword=1;;
		h) PrintHelp; exit 0;;
    esac;
done;

if (($runSilently==1)); then
	if (($answerYes==1)); then
		UnloadAndDeleteLaunchAgents; 
		DeleteIDFApps;
		DeleteEverythingExceptLicensesActivationAndPrefs;
		CleanPackageMakerDB;
	else
		if (($answerNo==1)); then
			UnloadAndDeleteLaunchAgents; 
			DeleteIDFApps;
			DeleteEverythingExceptLicensesActivationAndPrefs;
			CleanPackageMakerDB;
			DeleteLicensesActivationAndPrefs;
		else
			echo "Options error: specify -y for YES or -n for NO when running silently.";
			exit 1;
		fi
	fi
else
  echo "Starting Identity Finder $0 script at $(date)";
	if (($answerYes==0)); then
    read -a answer -p "Preserve user prefs? (Yes/No)";
    theAnswer=${answer[0]};
  else
    theAnswer='y';
  fi
  case "$theAnswer" in
    (Yes|yes|YES|Y|y) UnloadAndDeleteLaunchAgents; DeleteIDFApps; DeleteEverythingExceptLicensesActivationAndPrefs; CleanPackageMakerDB;;
    (No|no|NO|N|n)		UnloadAndDeleteLaunchAgents; DeleteIDFApps; DeleteEverythingExceptLicensesActivationAndPrefs; CleanPackageMakerDB; DeleteLicensesActivationAndPrefs;;
  esac;
	echo "Completed Identity Finder $0 script at $(date).";
fi

exit 0;
